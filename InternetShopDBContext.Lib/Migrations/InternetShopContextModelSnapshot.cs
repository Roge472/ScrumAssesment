// <auto-generated />
using System;
using InternetShopDBContext.Lib.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InternetShopDBContext.Lib.Migrations
{
    [DbContext(typeof(InternetShopContext))]
    partial class InternetShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062");

            modelBuilder.Entity("BaseModelLibrary.Lib.Models.UserModels.EmailLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Hash")
                        .IsRequired();

                    b.Property<short>("IsEmailConfirmed");

                    b.Property<string>("Salt")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("EmailLogins");
                });

            modelBuilder.Entity("BaseModelLibrary.Lib.Models.UserModels.LoginProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("LoginProviders");
                });

            modelBuilder.Entity("BaseModelLibrary.Lib.Models.UserModels.SocialLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Login");

                    b.Property<int?>("LoginProviderId");

                    b.Property<string>("ProviderKey")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LoginProviderId");

                    b.HasIndex("UserId");

                    b.ToTable("SocialLogins");
                });

            modelBuilder.Entity("BaseModelLibrary.Lib.Models.UserModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastEntranceDate");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<DateTime>("RegistrationDate");

                    b.Property<int?>("RoleId");

                    b.Property<int>("Theme");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BaseModelLibrary.Models.CloudModels.ImageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("ImageModels");
                });

            modelBuilder.Entity("BaseModelLibrary.Models.UserModels.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BaseModelLibrary.Lib.Models.UserModels.EmailLogin", b =>
                {
                    b.HasOne("BaseModelLibrary.Lib.Models.UserModels.User", "User")
                        .WithOne("EmailLogin")
                        .HasForeignKey("BaseModelLibrary.Lib.Models.UserModels.EmailLogin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BaseModelLibrary.Lib.Models.UserModels.SocialLogin", b =>
                {
                    b.HasOne("BaseModelLibrary.Lib.Models.UserModels.LoginProvider", "LoginProvider")
                        .WithMany()
                        .HasForeignKey("LoginProviderId");

                    b.HasOne("BaseModelLibrary.Lib.Models.UserModels.User", "User")
                        .WithMany("SocialLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BaseModelLibrary.Lib.Models.UserModels.User", b =>
                {
                    b.HasOne("BaseModelLibrary.Models.UserModels.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
